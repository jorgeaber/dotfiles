# GLOBAL OPTIONS
set-window-option -g xterm-keys on
bind-key -n C-Right send-keys C-Right
set -g visual-bell off
set -g bell-on-alert off
set -g default-terminal "screen-256color"
screen_terminfo="screen-256color"

# xterm-style function key sequences
setw -g xterm-keys on

# Reset Prefix
unbind j
unbind C-b 
set -g prefix C-a
bind-key a send-prefix # for nested tmux sessions

# hide status bar
set -g status off

# large history
set-option -g history-limit 10000

# colors
setw -g mode-bg black
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"
set-option -g pane-active-border-fg green

# utf8 support
set-window-option -g utf8 on

# basic settings
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse

# Automatically set window title
setw -g automatic-rename

# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
setw -g mode-mouse on

#setw -g mouse-resize-pane on
#set -g mouse-select-window on
set -g mouse-select-pane on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# reload tmux conf
bind-key r source-file ~/.tmux.conf


#######################################################################################


# PANES


# quick pane cycling
#unbind ^A
#bind ^A select-pane -t :.+

unbind '"' # unbind horizontal split
unbind %   # unbind vertical split
bind-key - split-window -v # split pane horizontally
bind-key | split-window -h # split pane vertically

#previous pane
bind-key -n C-up prev
bind-key -n C-left prev

#next pane
bind-key -n C-right next
bind-key -n C-down next

# Navigation
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing 
bind-key C-h resize-pane -L
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-l resize-pane -R

# use vim motion keys while in copy mode
setw -g mode-keys vi
set -g status-keys vi

bind-key Space list-panes  # list panes
bind-key Enter break-pane # break-pane

#bind Escape copy-mode
# new split in current pane (horizontal / vertical)

# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split


#######################################################################################


# WINDOWS


set-window-option -g window-status-current-bg red
bind C-j previous-window
bind C-k next-window
bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on


#######################################################################################


# LAYOUTS


bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind M-r rotate-window
 
# focus on first window
# select-window -t 0

# transfer buffer to global clipboard
bind-key y run-shell "tmux show-buffer | xclip -sel clip -i"
bind y run-shell "tmux show-buffer | xclip -sel clip -i"
bind g run "echo 'hola'"
